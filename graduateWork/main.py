import math


def interpolation(x, x_arr, y_arr):
        if (len(x_arr) != len(y_arr)):
            return ValueError("Функция интерполяции должна принимать массивы одинаковой длины, так как значения из первого массивая являются ключом для значений из второго массива.")

        mid = round((len(x_arr) - 1) / 2)
        left = 0
        right = len(x_arr) - 1

        is_exist = False
        while left < right:
            mid = round((left + right) / 2)
            if (x == x_arr[mid]):
                is_exist = True
                break
            elif (x < x_arr[mid]):
                right = mid - 1
            else:
                left = mid + 1
        
        if is_exist: 
            return y_arr[mid]
        else:
            if mid == len(x_arr) - 1 or mid == 0:
                return ValueError("Полученное функцией интерполяции значение выходит за пределы диапазона датасета") 
            else:
                return y_arr[mid - 1] + ((y_arr[mid] - y_arr[mid - 1]) / (x_arr[mid] - x_arr[mid - 1]))


def find_density(temperature):
    t = [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]
    d = [0.99987, 0.99997, 1.0, 0.99997, 0.99988, 0.99973, 0.99953, 0.99927, 0.99897, 0.99862, 0.99823, 0.9978, 0.99733, 0.99681, 0.99626, 0.99568, 0.99506, 0.9944, 0.99372, 0.993, 0.99225, 0.99147, 0.9907, 0.9898, 0.989, 0.9881, 0.9872, 0.9862, 0.9853, 0.9843, 0.9832, 0.9822, 0.9811, 0.9801, 0.9789, 0.9778, 0.9767, 0.9755, 0.9743, 0.9731, 0.9718, 0.9706, 0.9693, 0.968, 0.9667, 0.9653, 0.964, 0.9626, 0.9612, 0.9598, 0.9584]
    return interpolation(temperature, t, d)


def find_specific_heat(temperature):
    t = [0, 2, 3, 4, 6, 7, 8, 10, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 26, 27, 28, 30, 31, 32, 34, 35, 36, 38, 39, 40, 42, 43, 44, 46, 47, 48, 50, 51, 52, 54, 55, 56, 58, 59, 60, 62, 63, 64, 66, 67, 68, 70, 71, 72, 74, 75, 76, 78, 79, 80, 82, 83, 84, 86, 87, 88, 90, 91, 92, 94, 95, 96, 98, 99, 100]
    c = [4.217, 4.21, 4.207, 4.205, 4.2, 4.198, 4.196, 4.192, 4.191, 4.189, 4.187, 4.186, 4.185, 4.183, 4.182, 4.182, 4.181, 4.18, 4.18, 4.179, 4.179, 4.179, 4.178, 4.178, 4.178, 4.178, 4.178, 4.178, 4.178, 4.179, 4.179, 4.179, 4.179, 4.179, 4.18, 4.18, 4.18, 4.181, 4.181, 4.182, 4.182, 4.183, 4.183, 4.184, 4.184, 4.185, 4.186, 4.186, 4.187, 4.188, 4.188, 4.189, 4.19, 4.19, 4.191, 4.192, 4.193, 4.194, 4.195, 4.196, 4.196, 4.198, 4.199, 4.2, 4.201, 4.202, 4.203, 4.205, 4.206, 4.207, 4.209, 4.21, 4.211, 4.213, 4.214, 4.216]
    return interpolation(temperature, t, c)



def main():
    # Информация о программе

    print("Привет! Эта программа помогает рассчитать теплообменник для подбора подходящего по ГОСТу и последующего проектирования.")
    print("Программа создана студентами группы Х-300007")
    print("Власова А., Глебова Д., Дернина Д., Лежнева Ю., Потапов С.")

    print("\nВнимание! Есть несколько особенностей программы, на которые стоит обратить внимание: ")
    print("1. Нагреваемая и охлаждаемая среды - это вода.")
    print("2. Движение жидкостей - ПРОТИВОТОК.\n")


    # Получение и сохранение от пользователя данных задания


    class Data:
        con=float(input("Производительность [м3/ч]: ") or 4)

        h_p=float(input("Давление НАГРЕВАЕМОЙ среды [атм]: ") or 1)
        h_t_s=float(input("Начальная температура НАГРЕВАЕМОЙ среды [°C]: ") or 10)
        h_t_e=float(input("Конечная температура НАГРЕВАЕМОЙ среды [°C]: ") or 70)
        
        c_p=float(input("Давление ОХЛАЖДАЕМОЙ среды [атм]: ") or 3)
        c_t_s=float(input("Начальная температура ОХЛАЖДАЕМОЙ среды [°C]: ") or 132.9)
        c_t_e=float(input("Конечная температура ОХЛАЖДАЕМОЙ среды [°C]: ") or 50)
    
    data = Data()
    
   
    # ТЕПЛОВОЙ РАСЧЕТ (РЕШЕНИЕ)

    print("\n\n")
    print("================================")
    print("РЕШЕНИЕ:")

    # Получение тепловой схемы процесса

    dt_max = abs(data.h_t_e - data.c_t_s)
    dt_min = abs(data.c_t_e - data.h_t_s)
    t_avr = (dt_max - dt_min) / (2.3 * math.log10(dt_max/dt_min)) 

    print("\n1. Тепловая схема процесса: ")
    print("{:.1f} °C ==========> {:.1f} °C".format(data.h_t_e, data.h_t_s))
    print("{:.1f} °C <========== {:.1f} °C".format(data.c_t_s, data.c_t_e))
    print("-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-")
    print("dt(б) = {:.1f} °C, dt(м) = {:.1f} °C".format(dt_max, dt_min))
    print("-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-")
    print("Средняя разность температур при противотоке: {:.1f} °C".format(t_avr))

    t_avr_h = 0.5 * (data.h_t_e + data.h_t_s)
    t_avr_c = 0.5 * (data.c_t_e + data.c_t_s)

    print("\n2. Средние температуры рабочих жидкостей: ")
    print("Средняя температура воды в нагреваемой жидкости: {:.1f} °C".format(t_avr_h))
    print("Средняя температура воды в охлаждаемой жидкости: {:.1f} °C".format(t_avr_c))


    # Находим при помощи интерполяции плотность и удельную теплопроводность  

    h_dens = find_density(t_avr_h) * 1000
    c_dens = find_density(t_avr_c) * 1000
    h_spec = find_specific_heat(t_avr_h) * 1000
    c_spec = find_specific_heat(t_avr_c) * 1000

    print("\n3. Расчет методом интерполяции плотностей и удельных теплоемкости сред при найденных средних температурах: ")
    print("Плотность воды при температуре {:.1f} равна {:.0f} кг/м3".format(t_avr_h, h_dens))
    print("Плотность воды при температуре {:.1f} равна {:.0f} кг/м3".format(t_avr_c, c_dens))
    print("Удельная теплоемкость воды при температуре {:.1f} равна {:.0f} Дж/(кг*К)".format(t_avr_h, h_spec))
    print("Удельная теплоемкость воды при температуре {:.1f} равна {:.0f} Дж/(кг*К)".format(t_avr_h, c_spec))


    # Объемный расход и производительность сред, тепловая нагрузка

    V1 = v_con_c = data.con / 3600                              # [м3 / с]
    G1 = v_perf_c = v_con_c * c_dens                            # [кг / с]
    Q = G1 * c_spec * (data.c_t_s - data.c_t_e)                 # [Вт]

    G2 = v_perf_h = Q / (h_spec * (data.h_t_e - data.h_t_s))    # [кг / с]
    V2 = v_con_h = G2 / h_dens                                  # [м3 / с]

    print("\n4. Объемные расход и производительность сред: ")
    print("Объемный расход воды V1 = {:.4f} м3/с".format(V1))
    print("Объемный расход воды V2 = {:.4f} м3/с".format(V2))
    print("Производительность G1 = {:.4f} кг/с".format(G1))
    print("Производительность G2 = {:.2f} кг/с".format(G2))
    print("Тепловая нагрузка Q = {:.3f} кВт".format(Q))

    


if __name__ == '__main__':
    main()